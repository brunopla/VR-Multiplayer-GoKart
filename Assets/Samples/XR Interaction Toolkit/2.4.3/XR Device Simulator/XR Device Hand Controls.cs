//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.1
//     from Assets/Samples/XR Interaction Toolkit/2.4.3/XR Device Simulator/XR Device Hand Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @XRDeviceHandControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @XRDeviceHandControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""XR Device Hand Controls"",
    ""maps"": [
        {
            ""name"": ""Hands"",
            ""id"": ""820deea6-fad9-4f2d-9e5e-e403c9ab0ddc"",
            ""actions"": [
                {
                    ""name"": ""Poke"",
                    ""type"": ""Button"",
                    ""id"": ""40eda730-1343-4304-a541-d7c035370ce5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pinch"",
                    ""type"": ""Button"",
                    ""id"": ""34056e04-d03d-4802-982b-a9972fd692ff"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Grab"",
                    ""type"": ""Button"",
                    ""id"": ""07d064b1-f208-4c9f-bd5a-2620a10e7bab"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Thumb"",
                    ""type"": ""Button"",
                    ""id"": ""cc02894b-62a0-483f-8d1b-87b399099928"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Open"",
                    ""type"": ""Button"",
                    ""id"": ""0221ceea-2049-4516-a5e4-23aab7d2185e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fist"",
                    ""type"": ""Button"",
                    ""id"": ""5f81ec5a-1bc2-4ce7-852c-d84a8000be9b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""7c5ef312-b032-4eaa-9355-b7007e83617c"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Grab"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f78285cd-b2ef-40bf-9d24-127a0109f36d"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Poke"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3f69143f-8648-4219-94f6-4e9827ad00de"",
                    ""path"": ""<Keyboard>/m"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pinch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b132c4e0-c5db-4c99-ab71-5939b616cf07"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Thumb"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""aaffc690-326b-4676-96df-8e41b88bb7e8"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fist"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""ebffb4d0-8629-4206-9457-5cccde9d7c65"",
                    ""path"": ""<Keyboard>/o"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Open"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Hands
        m_Hands = asset.FindActionMap("Hands", throwIfNotFound: true);
        m_Hands_Poke = m_Hands.FindAction("Poke", throwIfNotFound: true);
        m_Hands_Pinch = m_Hands.FindAction("Pinch", throwIfNotFound: true);
        m_Hands_Grab = m_Hands.FindAction("Grab", throwIfNotFound: true);
        m_Hands_Thumb = m_Hands.FindAction("Thumb", throwIfNotFound: true);
        m_Hands_Open = m_Hands.FindAction("Open", throwIfNotFound: true);
        m_Hands_Fist = m_Hands.FindAction("Fist", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Hands
    private readonly InputActionMap m_Hands;
    private List<IHandsActions> m_HandsActionsCallbackInterfaces = new List<IHandsActions>();
    private readonly InputAction m_Hands_Poke;
    private readonly InputAction m_Hands_Pinch;
    private readonly InputAction m_Hands_Grab;
    private readonly InputAction m_Hands_Thumb;
    private readonly InputAction m_Hands_Open;
    private readonly InputAction m_Hands_Fist;
    public struct HandsActions
    {
        private @XRDeviceHandControls m_Wrapper;
        public HandsActions(@XRDeviceHandControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Poke => m_Wrapper.m_Hands_Poke;
        public InputAction @Pinch => m_Wrapper.m_Hands_Pinch;
        public InputAction @Grab => m_Wrapper.m_Hands_Grab;
        public InputAction @Thumb => m_Wrapper.m_Hands_Thumb;
        public InputAction @Open => m_Wrapper.m_Hands_Open;
        public InputAction @Fist => m_Wrapper.m_Hands_Fist;
        public InputActionMap Get() { return m_Wrapper.m_Hands; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(HandsActions set) { return set.Get(); }
        public void AddCallbacks(IHandsActions instance)
        {
            if (instance == null || m_Wrapper.m_HandsActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_HandsActionsCallbackInterfaces.Add(instance);
            @Poke.started += instance.OnPoke;
            @Poke.performed += instance.OnPoke;
            @Poke.canceled += instance.OnPoke;
            @Pinch.started += instance.OnPinch;
            @Pinch.performed += instance.OnPinch;
            @Pinch.canceled += instance.OnPinch;
            @Grab.started += instance.OnGrab;
            @Grab.performed += instance.OnGrab;
            @Grab.canceled += instance.OnGrab;
            @Thumb.started += instance.OnThumb;
            @Thumb.performed += instance.OnThumb;
            @Thumb.canceled += instance.OnThumb;
            @Open.started += instance.OnOpen;
            @Open.performed += instance.OnOpen;
            @Open.canceled += instance.OnOpen;
            @Fist.started += instance.OnFist;
            @Fist.performed += instance.OnFist;
            @Fist.canceled += instance.OnFist;
        }

        private void UnregisterCallbacks(IHandsActions instance)
        {
            @Poke.started -= instance.OnPoke;
            @Poke.performed -= instance.OnPoke;
            @Poke.canceled -= instance.OnPoke;
            @Pinch.started -= instance.OnPinch;
            @Pinch.performed -= instance.OnPinch;
            @Pinch.canceled -= instance.OnPinch;
            @Grab.started -= instance.OnGrab;
            @Grab.performed -= instance.OnGrab;
            @Grab.canceled -= instance.OnGrab;
            @Thumb.started -= instance.OnThumb;
            @Thumb.performed -= instance.OnThumb;
            @Thumb.canceled -= instance.OnThumb;
            @Open.started -= instance.OnOpen;
            @Open.performed -= instance.OnOpen;
            @Open.canceled -= instance.OnOpen;
            @Fist.started -= instance.OnFist;
            @Fist.performed -= instance.OnFist;
            @Fist.canceled -= instance.OnFist;
        }

        public void RemoveCallbacks(IHandsActions instance)
        {
            if (m_Wrapper.m_HandsActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IHandsActions instance)
        {
            foreach (var item in m_Wrapper.m_HandsActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_HandsActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public HandsActions @Hands => new HandsActions(this);
    public interface IHandsActions
    {
        void OnPoke(InputAction.CallbackContext context);
        void OnPinch(InputAction.CallbackContext context);
        void OnGrab(InputAction.CallbackContext context);
        void OnThumb(InputAction.CallbackContext context);
        void OnOpen(InputAction.CallbackContext context);
        void OnFist(InputAction.CallbackContext context);
    }
}
